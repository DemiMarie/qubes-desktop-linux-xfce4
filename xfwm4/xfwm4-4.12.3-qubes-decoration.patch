Index: xfwm4-4.12.3/src/client.c
===================================================================
--- xfwm4-4.12.3.orig/src/client.c
+++ xfwm4-4.12.3/src/client.c
@@ -165,6 +165,93 @@ clientUpdateColormaps (Client *c)
     }
 }
 
+void
+getQubesLabel (Client *c)
+{
+    ScreenInfo *screen_info;
+    DisplayInfo *display_info;
+    Atom atom_label;
+
+    screen_info = c->screen_info;
+    display_info = screen_info->display_info;
+
+    atom_label = XInternAtom(display_info->dpy, "_QUBES_LABEL", TRUE);
+
+    if (atom_label == 0) {
+        c->qubes_label_color = QUBES_LABEL_DOM0;
+    } else {
+        Atom actual_type;
+        int actual_format;
+        unsigned long nitems = 0, bytes_left;
+        char *data = 0;
+
+        if ((XGetWindowProperty (display_info->dpy, c->window, atom_label, 0L, 1L,
+                        FALSE, AnyPropertyType, &actual_type, &actual_format, &nitems,
+                        &bytes_left, (unsigned char **) &data) == Success))
+        {
+            if (nitems != 1) {
+                // ERROR? Only Dom0 Windows don't have this property set...
+                c->qubes_label_color = QUBES_LABEL_DOM0;
+            } else {
+                int qubes_label = (int)*data;
+                if (qubes_label >= 0 && qubes_label < MAX_QUBES_LABELS) {
+                    c->qubes_label_color = qubes_label_colors[qubes_label];
+                } else {
+                    /* out of range?! */
+                    c->qubes_label_color = QUBES_LABEL_RED;
+                }
+            }
+        } else {
+            c->qubes_label_color = QUBES_LABEL_DOM0;
+        }
+    }
+}
+
+void
+getQubesVmName (Client *c)
+{
+    ScreenInfo *screen_info;
+    DisplayInfo *display_info;
+    Atom atom_vmname;
+
+    screen_info = c->screen_info;
+    display_info = screen_info->display_info;
+
+    if (c->qubes_vmname)
+        return;
+
+    atom_vmname = XInternAtom(display_info->dpy, "_QUBES_VMNAME", TRUE);
+
+    if (atom_vmname == 0) {
+        c->qubes_vmname = g_strdup("[Dom0] ");
+    } else {
+        Atom actual_type;
+        int actual_format;
+        unsigned long nitems = 0, bytes_left;
+        char *data = 0;
+
+        if ((XGetWindowProperty (display_info->dpy, c->window, atom_vmname, 0L, 0L,
+                        FALSE, AnyPropertyType, &actual_type, &actual_format, &nitems,
+                        &bytes_left, (unsigned char **) &data) == Success))
+        {
+            if (bytes_left > 0) {
+                if ((XGetWindowProperty (display_info->dpy, c->window, atom_vmname, 0L, bytes_left,
+                                FALSE, AnyPropertyType, &actual_type, &actual_format, &nitems,
+                                &bytes_left, (unsigned char **) &data) == Success))
+                {
+                    c->qubes_vmname = g_strdup_printf (_("[%s] "), data);
+                } else {
+                    c->qubes_vmname = g_strdup (_("[ERROR Reading VM name?!] "));
+                }
+            } else {
+                c->qubes_vmname = g_strdup("[Dom0] ");
+            }
+        } else {
+            c->qubes_vmname = g_strdup("[Dom0] ");
+        }
+    }
+}
+
 static gchar*
 clientCreateTitleName (Client *c, gchar *name, gchar *hostname)
 {
@@ -178,14 +265,16 @@ clientCreateTitleName (Client *c, gchar
     screen_info = c->screen_info;
     display_info = screen_info->display_info;
 
+    getQubesVmName (c);
+
     if (strlen (hostname) && (display_info->hostname) && (g_ascii_strcasecmp (display_info->hostname, hostname)))
     {
         /* TRANSLATORS: "(on %s)" is like "running on" the name of the other host */
-        title = g_strdup_printf (_("%s (on %s)"), name, hostname);
+        title = g_strdup_printf (_("%s%s (on %s)"), c->qubes_vmname, name, hostname);
     }
     else
     {
-        title = g_strdup (name);
+        title = g_strdup_printf ("%s%s", c->qubes_vmname, name);
     }
 
     return title;
@@ -1332,6 +1421,10 @@ clientFree (Client *c)
     {
         g_free (c->hostname);
     }
+    if (c->qubes_vmname)
+    {
+        g_free (c->qubes_vmname);
+    }
     if (c->size)
     {
         XFree (c->size);
@@ -1441,6 +1534,7 @@ static void
 clientUpdateIconPix (Client *c)
 {
     ScreenInfo *screen_info;
+    Decoration *decoration;
     gint size;
     GdkPixbuf *icon;
     int i;
@@ -1451,12 +1545,13 @@ clientUpdateIconPix (Client *c)
     TRACE ("entering clientUpdateIconPix for \"%s\" (0x%lx)", c->name, c->window);
 
     screen_info = c->screen_info;
+    decoration = getDecorationForColor(screen_info, c->qubes_label_color);
     for (i = 0; i < STATE_TOGGLED; i++)
     {
         xfwmPixmapFree (&c->appmenu[i]);
     }
 
-    if (xfwmPixmapNone(&screen_info->buttons[MENU_BUTTON][ACTIVE]))
+    if (xfwmPixmapNone(&decoration->buttons[MENU_BUTTON][ACTIVE]))
     {
         /* The current theme has no menu button */
         return;
@@ -1464,13 +1559,13 @@ clientUpdateIconPix (Client *c)
 
     for (i = 0; i < STATE_TOGGLED; i++)
     {
-        if (!xfwmPixmapNone(&screen_info->buttons[MENU_BUTTON][i]))
+        if (!xfwmPixmapNone(&decoration->buttons[MENU_BUTTON][i]))
         {
-            xfwmPixmapDuplicate (&screen_info->buttons[MENU_BUTTON][i], &c->appmenu[i]);
+            xfwmPixmapDuplicate (&decoration->buttons[MENU_BUTTON][i], &c->appmenu[i]);
         }
     }
-    size = MIN (screen_info->buttons[MENU_BUTTON][ACTIVE].width,
-                screen_info->buttons[MENU_BUTTON][ACTIVE].height);
+    size = MIN (decoration->buttons[MENU_BUTTON][ACTIVE].width,
+                decoration->buttons[MENU_BUTTON][ACTIVE].height);
 
     if (size > 1)
     {
@@ -1647,6 +1742,11 @@ clientFrame (DisplayInfo *display_info,
     getTransientFor (display_info, screen_info->xroot, c->window, &c->transient_for);
     XChangeSaveSet(display_info->dpy, c->window, SetModeInsert);
 
+    /* Qubes window decoration */
+    getQubesLabel(c);
+    getQubesVmName(c);
+    clientUpdateName(c);
+
     /* Initialize structure */
     c->size = NULL;
     c->flags = 0L;
@@ -3928,9 +4028,11 @@ xfwmPixmap *
 clientGetButtonPixmap (Client *c, int button, int state)
 {
     ScreenInfo *screen_info;
+    Decoration *decoration;
 
     TRACE ("entering clientGetButtonPixmap button=%i, state=%i", button, state);
     screen_info = c->screen_info;
+    decoration = getDecorationForColor(screen_info, c->qubes_label_color);
     switch (button)
     {
         case MENU_BUTTON:
@@ -3942,32 +4044,32 @@ clientGetButtonPixmap (Client *c, int bu
             break;
         case SHADE_BUTTON:
             if (FLAG_TEST (c->flags, CLIENT_FLAG_SHADED)
-                && (!xfwmPixmapNone(&screen_info->buttons[SHADE_BUTTON][state + STATE_TOGGLED])))
+                && (!xfwmPixmapNone(&decoration->buttons[SHADE_BUTTON][state + STATE_TOGGLED])))
             {
-                return &screen_info->buttons[SHADE_BUTTON][state + STATE_TOGGLED];
+                return &decoration->buttons[SHADE_BUTTON][state + STATE_TOGGLED];
             }
-            return &screen_info->buttons[SHADE_BUTTON][state];
+            return &decoration->buttons[SHADE_BUTTON][state];
             break;
         case STICK_BUTTON:
             if (FLAG_TEST (c->flags, CLIENT_FLAG_STICKY)
-                && (!xfwmPixmapNone(&screen_info->buttons[STICK_BUTTON][state + STATE_TOGGLED])))
+                && (!xfwmPixmapNone(&decoration->buttons[STICK_BUTTON][state + STATE_TOGGLED])))
             {
-                return &screen_info->buttons[STICK_BUTTON][state + STATE_TOGGLED];
+                return &decoration->buttons[STICK_BUTTON][state + STATE_TOGGLED];
             }
-            return &screen_info->buttons[STICK_BUTTON][state];
+            return &decoration->buttons[STICK_BUTTON][state];
             break;
         case MAXIMIZE_BUTTON:
             if (FLAG_TEST (c->flags, CLIENT_FLAG_MAXIMIZED)
-                && (!xfwmPixmapNone(&screen_info->buttons[MAXIMIZE_BUTTON][state + STATE_TOGGLED])))
+                && (!xfwmPixmapNone(&decoration->buttons[MAXIMIZE_BUTTON][state + STATE_TOGGLED])))
             {
-                return &screen_info->buttons[MAXIMIZE_BUTTON][state + STATE_TOGGLED];
+                return &decoration->buttons[MAXIMIZE_BUTTON][state + STATE_TOGGLED];
             }
-            return &screen_info->buttons[MAXIMIZE_BUTTON][state];
+            return &decoration->buttons[MAXIMIZE_BUTTON][state];
             break;
         default:
             break;
     }
-    return &screen_info->buttons[button][state];
+    return &decoration->buttons[button][state];
 }
 
 int
Index: xfwm4-4.12.3/src/client.h
===================================================================
--- xfwm4-4.12.3.orig/src/client.h
+++ xfwm4-4.12.3/src/client.h
@@ -327,6 +327,8 @@ struct _Client
     gint struts[STRUTS_SIZE];
     gchar *hostname;
     gchar *name;
+    gchar *qubes_vmname;
+    guint qubes_label_color;
     guint32 user_time;
     GPid pid;
     guint32 ping_time;
Index: xfwm4-4.12.3/src/frame.c
===================================================================
--- xfwm4-4.12.3.orig/src/frame.c
+++ xfwm4-4.12.3/src/frame.c
@@ -48,51 +48,61 @@ typedef struct
 int
 frameDecorationLeft (ScreenInfo *screen_info)
 {
+    Decoration *decoration;
     TRACE ("entering frameDecorationLeft");
 
     g_return_val_if_fail (screen_info != NULL, 0);
-    return screen_info->sides[SIDE_LEFT][ACTIVE].width;
+    decoration = getDecorationForColor(screen_info, QUBES_LABEL_DOM0);
+    return decoration->sides[SIDE_LEFT][ACTIVE].width;
 }
 
 int
 frameDecorationRight (ScreenInfo *screen_info)
 {
+    Decoration *decoration;
     TRACE ("entering frameDecorationRight");
 
     g_return_val_if_fail (screen_info != NULL, 0);
-    return screen_info->sides[SIDE_RIGHT][ACTIVE].width;
+    decoration = getDecorationForColor(screen_info, QUBES_LABEL_DOM0);
+    return decoration->sides[SIDE_RIGHT][ACTIVE].width;
 }
 
 int
 frameDecorationTop (ScreenInfo *screen_info)
 {
+    Decoration *decoration;
     TRACE ("entering frameDecorationTop");
 
     g_return_val_if_fail (screen_info != NULL, 0);
-    return screen_info->title[TITLE_3][ACTIVE].height;
+    decoration = getDecorationForColor(screen_info, QUBES_LABEL_DOM0);
+    return decoration->title[TITLE_3][ACTIVE].height;
 }
 
 int
 frameDecorationBottom (ScreenInfo *screen_info)
 {
+    Decoration *decoration;
     TRACE ("entering frameDecorationBottom");
 
     g_return_val_if_fail (screen_info != NULL, 0);
-    return screen_info->sides[SIDE_BOTTOM][ACTIVE].height;
+    decoration = getDecorationForColor(screen_info, QUBES_LABEL_DOM0);
+    return decoration->sides[SIDE_BOTTOM][ACTIVE].height;
 }
 
 int
 frameLeft (Client * c)
 {
+    Decoration *decoration;
     TRACE ("entering frameLeft");
 
     g_return_val_if_fail (c != NULL, 0);
+    decoration = getDecorationForColor(c->screen_info, c->qubes_label_color);
     if (FLAG_TEST (c->xfwm_flags, XFWM_FLAG_HAS_BORDER)
         && !FLAG_TEST (c->flags, CLIENT_FLAG_FULLSCREEN)
         && (!FLAG_TEST_ALL (c->flags, CLIENT_FLAG_MAXIMIZED)
             || !(c->screen_info->params->borderless_maximize)))
     {
-        return c->screen_info->sides[SIDE_LEFT][ACTIVE].width;
+        return decoration->sides[SIDE_LEFT][ACTIVE].width;
     }
     return 0;
 }
@@ -100,15 +110,17 @@ frameLeft (Client * c)
 int
 frameRight (Client * c)
 {
+    Decoration *decoration;
     TRACE ("entering frameRight");
 
     g_return_val_if_fail (c != NULL, 0);
+    decoration = getDecorationForColor(c->screen_info, c->qubes_label_color);
     if (FLAG_TEST (c->xfwm_flags, XFWM_FLAG_HAS_BORDER)
         && !FLAG_TEST (c->flags, CLIENT_FLAG_FULLSCREEN)
         && (!FLAG_TEST_ALL (c->flags, CLIENT_FLAG_MAXIMIZED)
             || !(c->screen_info->params->borderless_maximize)))
     {
-        return c->screen_info->sides[SIDE_RIGHT][ACTIVE].width;
+        return decoration->sides[SIDE_RIGHT][ACTIVE].width;
     }
     return 0;
 }
@@ -116,12 +128,14 @@ frameRight (Client * c)
 int
 frameTop (Client * c)
 {
+    Decoration *decoration;
     TRACE ("entering frameTop");
 
     g_return_val_if_fail (c != NULL, 0);
+    decoration = getDecorationForColor(c->screen_info, c->qubes_label_color);
     if (CLIENT_HAS_FRAME (c))
     {
-        return c->screen_info->title[TITLE_3][ACTIVE].height;
+        return decoration->title[TITLE_3][ACTIVE].height;
     }
     return 0;
 }
@@ -129,15 +143,17 @@ frameTop (Client * c)
 int
 frameBottom (Client * c)
 {
+    Decoration *decoration;
     TRACE ("entering frameBottom");
 
     g_return_val_if_fail (c != NULL, 0);
+    decoration = getDecorationForColor(c->screen_info, c->qubes_label_color);
     if (FLAG_TEST (c->xfwm_flags, XFWM_FLAG_HAS_BORDER)
         && !FLAG_TEST (c->flags, CLIENT_FLAG_FULLSCREEN)
         && (!FLAG_TEST_ALL (c->flags, CLIENT_FLAG_MAXIMIZED)
             || !(c->screen_info->params->borderless_maximize)))
     {
-        return c->screen_info->sides[SIDE_BOTTOM][ACTIVE].height;
+        return decoration->sides[SIDE_BOTTOM][ACTIVE].height;
     }
     return 0;
 }
@@ -317,30 +333,34 @@ frameExtentHeight (Client * c)
 static int
 frameTopLeftWidth (Client * c, int state)
 {
+    Decoration *decoration;
     TRACE ("entering frameTopLeftWidth");
 
     g_return_val_if_fail (c != NULL, 0);
+    decoration = getDecorationForColor(c->screen_info, c->qubes_label_color);
     if (FLAG_TEST_ALL (c->flags, CLIENT_FLAG_MAXIMIZED)
         && c->screen_info->params->borderless_maximize)
     {
         return 0;
     }
-    return c->screen_info->corners[CORNER_TOP_LEFT][state].width;
+    return decoration->corners[CORNER_TOP_LEFT][state].width;
 
 }
 
 static int
 frameTopRightWidth (Client * c, int state)
 {
+    Decoration *decoration;
     TRACE ("entering frameTopRightWidth");
 
     g_return_val_if_fail (c != NULL, 0);
+    decoration = getDecorationForColor(c->screen_info, c->qubes_label_color);
     if (FLAG_TEST_ALL (c->flags, CLIENT_FLAG_MAXIMIZED)
         && c->screen_info->params->borderless_maximize)
     {
         return 0;
     }
-    return c->screen_info->corners[CORNER_TOP_RIGHT][state].width;
+    return decoration->corners[CORNER_TOP_RIGHT][state].width;
 }
 
 static int
@@ -361,6 +381,7 @@ static void
 frameFillTitlePixmap (Client * c, int state, int part, int x, int w, int h, xfwmPixmap * title_pm, xfwmPixmap * top_pm)
 {
     ScreenInfo *screen_info;
+    Decoration *decoration;
 
     TRACE ("entering frameFillTitlePixmap");
 
@@ -369,22 +390,24 @@ frameFillTitlePixmap (Client * c, int st
     g_return_if_fail (top_pm);
 
     screen_info = c->screen_info;
+    decoration = getDecorationForColor(screen_info, c->qubes_label_color);
 
-    if (!xfwmPixmapNone(&screen_info->top[part][state]))
+    if (!xfwmPixmapNone(&decoration->top[part][state]))
     {
-        xfwmPixmapFill (&screen_info->top[part][state], top_pm, x, 0, w, h);
+        xfwmPixmapFill (&decoration->top[part][state], top_pm, x, 0, w, h);
     }
     else
     {
-        xfwmPixmapFill (&screen_info->title[part][state], top_pm, x, 0, w, h);
+        xfwmPixmapFill (&decoration->title[part][state], top_pm, x, 0, w, h);
     }
-    xfwmPixmapFill (&screen_info->title[part][state], title_pm, x, 0, w, frameTop (c));
+    xfwmPixmapFill (&decoration->title[part][state], title_pm, x, 0, w, frameTop (c));
 }
 
 static void
 frameCreateTitlePixmap (Client * c, int state, int left, int right, xfwmPixmap * title_pm, xfwmPixmap * top_pm)
 {
     ScreenInfo *screen_info;
+    Decoration *decoration;
     GdkPixmap *gpixmap;
     GdkGCValues values;
     GdkGC *gc;
@@ -401,6 +424,7 @@ frameCreateTitlePixmap (Client * c, int
     g_return_if_fail (top_pm);
 
     screen_info = c->screen_info;
+    decoration = getDecorationForColor(screen_info, c->qubes_label_color);
 
     if (left > right)
     {
@@ -461,9 +485,9 @@ frameCreateTitlePixmap (Client * c, int
         title_y = MAX (0, frameTop (c) - title_height);
     }
 
-    if (!xfwmPixmapNone(&screen_info->top[3][ACTIVE]))
+    if (!xfwmPixmapNone(&decoration->top[3][ACTIVE]))
     {
-        top_height = screen_info->top[3][ACTIVE].height;
+        top_height = decoration->top[3][ACTIVE].height;
     }
     else
     {
@@ -475,8 +499,8 @@ frameCreateTitlePixmap (Client * c, int
     }
 
     w1 = 0;
-    w2 = screen_info->title[TITLE_2][state].width;
-    w4 = screen_info->title[TITLE_4][state].width;
+    w2 = decoration->title[TITLE_2][state].width;
+    w4 = decoration->title[TITLE_4][state].width;
 
     if (screen_info->params->full_width_title)
     {
@@ -696,6 +720,7 @@ static void
 frameSetShape (Client * c, int state, FramePixmap * frame_pix, int button_x[BUTTON_COUNT])
 {
     ScreenInfo *screen_info;
+    Decoration *decoration;
     DisplayInfo *display_info;
     XRectangle rect;
     xfwmPixmap *my_pixmap;
@@ -705,6 +730,7 @@ frameSetShape (Client * c, int state, Fr
     TRACE ("setting shape for client (0x%lx)", c->window);
 
     screen_info = c->screen_info;
+    decoration = getDecorationForColor(screen_info, c->qubes_label_color);
     display_info = screen_info->display_info;
 
     if (!display_info->have_shape)
@@ -776,25 +802,25 @@ frameSetShape (Client * c, int state, Fr
         if (xfwmWindowVisible (&c->corners[CORNER_BOTTOM_LEFT]))
         {
             XShapeCombineMask (display_info->dpy, MYWINDOW_XWINDOW (c->corners[CORNER_BOTTOM_LEFT]),
-                               ShapeBounding, 0, 0, screen_info->corners[CORNER_BOTTOM_LEFT][state].mask, ShapeSet);
+                               ShapeBounding, 0, 0, decoration->corners[CORNER_BOTTOM_LEFT][state].mask, ShapeSet);
         }
 
         if (xfwmWindowVisible (&c->corners[CORNER_BOTTOM_RIGHT]))
         {
             XShapeCombineMask (display_info->dpy, MYWINDOW_XWINDOW (c->corners[CORNER_BOTTOM_RIGHT]),
-                               ShapeBounding, 0, 0, screen_info->corners[CORNER_BOTTOM_RIGHT][state].mask, ShapeSet);
+                               ShapeBounding, 0, 0, decoration->corners[CORNER_BOTTOM_RIGHT][state].mask, ShapeSet);
         }
 
         if (xfwmWindowVisible (&c->corners[CORNER_TOP_LEFT]))
         {
             XShapeCombineMask (display_info->dpy, MYWINDOW_XWINDOW (c->corners[CORNER_TOP_LEFT]),
-                               ShapeBounding, 0, 0, screen_info->corners[CORNER_TOP_LEFT][state].mask, ShapeSet);
+                               ShapeBounding, 0, 0, decoration->corners[CORNER_TOP_LEFT][state].mask, ShapeSet);
         }
 
         if (xfwmWindowVisible (&c->corners[CORNER_TOP_RIGHT]))
         {
             XShapeCombineMask (display_info->dpy, MYWINDOW_XWINDOW (c->corners[CORNER_TOP_RIGHT]),
-                               ShapeBounding, 0, 0, screen_info->corners[CORNER_TOP_RIGHT][state].mask, ShapeSet);
+                               ShapeBounding, 0, 0, decoration->corners[CORNER_TOP_RIGHT][state].mask, ShapeSet);
         }
 
         for (i = 0; i < BUTTON_COUNT; i++)
@@ -808,48 +834,48 @@ frameSetShape (Client * c, int state, Fr
         }
 
         if (xfwmWindowVisible (&c->corners[CORNER_TOP_LEFT]) &&
-            (screen_info->corners[CORNER_TOP_LEFT][state].height > frameHeight (c) - frameBottom (c) + 1))
+            (decoration->corners[CORNER_TOP_LEFT][state].height > frameHeight (c) - frameBottom (c) + 1))
         {
             rect.x      = 0;
             rect.y      = frameHeight (c) - frameBottom (c) + 1;
             rect.width  = frameTopLeftWidth (c, state);
-            rect.height = screen_info->corners[CORNER_TOP_LEFT][state].height
+            rect.height = decoration->corners[CORNER_TOP_LEFT][state].height
                            - (frameHeight (c) - frameBottom (c) + 1);
             XShapeCombineRectangles (display_info->dpy, MYWINDOW_XWINDOW (c->corners[CORNER_TOP_LEFT]),
                                      ShapeBounding, 0, 0, &rect, 1, ShapeSubtract, 0);
         }
 
         if (xfwmWindowVisible (&c->corners[CORNER_TOP_RIGHT]) &&
-            (screen_info->corners[CORNER_TOP_RIGHT][state].height > frameHeight (c) - frameBottom (c) + 1))
+            (decoration->corners[CORNER_TOP_RIGHT][state].height > frameHeight (c) - frameBottom (c) + 1))
         {
             rect.x      = 0;
             rect.y      = frameHeight (c) - frameBottom (c) + 1;
             rect.width  = frameTopRightWidth (c, state);
-            rect.height = screen_info->corners[CORNER_TOP_RIGHT][state].height
+            rect.height = decoration->corners[CORNER_TOP_RIGHT][state].height
                            - (frameHeight (c) - frameBottom (c) + 1);
             XShapeCombineRectangles (display_info->dpy, MYWINDOW_XWINDOW (c->corners[CORNER_TOP_RIGHT]),
                                      ShapeBounding, 0, 0, &rect, 1, ShapeSubtract, 0);
         }
 
         if (xfwmWindowVisible (&c->corners[CORNER_BOTTOM_LEFT]) &&
-            (screen_info->corners[CORNER_BOTTOM_LEFT][state].height > frameHeight (c) - frameTop (c) + 1))
+            (decoration->corners[CORNER_BOTTOM_LEFT][state].height > frameHeight (c) - frameTop (c) + 1))
         {
             rect.x      = 0;
             rect.y      = 0;
-            rect.width  = screen_info->corners[CORNER_BOTTOM_LEFT][state].width;
-            rect.height = screen_info->corners[CORNER_BOTTOM_LEFT][state].height
+            rect.width  = decoration->corners[CORNER_BOTTOM_LEFT][state].width;
+            rect.height = decoration->corners[CORNER_BOTTOM_LEFT][state].height
                            - (frameHeight (c) - frameTop (c) + 1);
             XShapeCombineRectangles (display_info->dpy, MYWINDOW_XWINDOW (c->corners[CORNER_BOTTOM_LEFT]),
                                      ShapeBounding, 0, 0, &rect, 1, ShapeSubtract, 0);
         }
 
         if (xfwmWindowVisible (&c->corners[CORNER_BOTTOM_RIGHT]) &&
-            (screen_info->corners[CORNER_BOTTOM_RIGHT][state].height > frameHeight (c) - frameTop (c) + 1))
+            (decoration->corners[CORNER_BOTTOM_RIGHT][state].height > frameHeight (c) - frameTop (c) + 1))
         {
             rect.x      = 0;
             rect.y      = 0;
-            rect.width  = screen_info->corners[CORNER_BOTTOM_RIGHT][state].width;
-            rect.height = screen_info->corners[CORNER_BOTTOM_RIGHT][state].height
+            rect.width  = decoration->corners[CORNER_BOTTOM_RIGHT][state].width;
+            rect.height = decoration->corners[CORNER_BOTTOM_RIGHT][state].height
                            - (frameHeight (c) - frameTop (c) + 1);
             XShapeCombineRectangles (display_info->dpy, MYWINDOW_XWINDOW (c->corners[CORNER_BOTTOM_RIGHT]),
                                      ShapeBounding, 0, 0, &rect, 1, ShapeSubtract, 0);
@@ -887,7 +913,7 @@ frameSetShape (Client * c, int state, Fr
         if (xfwmWindowVisible (&c->sides[SIDE_BOTTOM]))
         {
             XShapeCombineShape (display_info->dpy, screen_info->shape_win, ShapeBounding,
-                                screen_info->corners[CORNER_BOTTOM_LEFT][state].width,
+                                decoration->corners[CORNER_BOTTOM_LEFT][state].width,
                                 frameHeight (c) - frameBottom (c),
                                 MYWINDOW_XWINDOW (c->sides[SIDE_BOTTOM]), ShapeBounding, ShapeUnion);
         }
@@ -895,7 +921,7 @@ frameSetShape (Client * c, int state, Fr
         if (xfwmWindowVisible (&c->sides[SIDE_TOP]))
         {
             XShapeCombineShape (display_info->dpy, screen_info->shape_win, ShapeBounding,
-                                screen_info->corners[CORNER_BOTTOM_LEFT][state].width,
+                                decoration->corners[CORNER_BOTTOM_LEFT][state].width,
                                 frameTop (c) - frameBottom (c),
                                 MYWINDOW_XWINDOW (c->sides[SIDE_TOP]), ShapeBounding, ShapeUnion);
         }
@@ -903,15 +929,15 @@ frameSetShape (Client * c, int state, Fr
         if (xfwmWindowVisible (&c->corners[CORNER_BOTTOM_LEFT]))
         {
             XShapeCombineShape (display_info->dpy, screen_info->shape_win, ShapeBounding, 0,
-                                frameHeight (c) - screen_info->corners[CORNER_BOTTOM_LEFT][state].height,
+                                frameHeight (c) - decoration->corners[CORNER_BOTTOM_LEFT][state].height,
                                 MYWINDOW_XWINDOW (c->corners[CORNER_BOTTOM_LEFT]), ShapeBounding, ShapeUnion);
         }
 
         if (xfwmWindowVisible (&c->corners[CORNER_BOTTOM_RIGHT]))
         {
             XShapeCombineShape (display_info->dpy, screen_info->shape_win, ShapeBounding,
-                                frameWidth (c) - screen_info->corners[CORNER_BOTTOM_RIGHT][state].width,
-                                frameHeight (c) - screen_info->corners[CORNER_BOTTOM_RIGHT][state].height,
+                                frameWidth (c) - decoration->corners[CORNER_BOTTOM_RIGHT][state].width,
+                                frameHeight (c) - decoration->corners[CORNER_BOTTOM_RIGHT][state].height,
                                 MYWINDOW_XWINDOW (c->corners[CORNER_BOTTOM_RIGHT]), ShapeBounding, ShapeUnion);
         }
 
@@ -927,7 +953,7 @@ frameSetShape (Client * c, int state, Fr
             if (xfwmWindowVisible (&c->buttons[i]))
             {
                 XShapeCombineShape (display_info->dpy, screen_info->shape_win, ShapeBounding, button_x[i],
-                                    (frameTop (c) - screen_info->buttons[i][state].height + 1) / 2,
+                                    (frameTop (c) - decoration->buttons[i][state].height + 1) / 2,
                                     MYWINDOW_XWINDOW (c->buttons[i]), ShapeBounding, ShapeUnion);
             }
         }
@@ -977,6 +1003,7 @@ static void
 frameDrawWin (Client * c)
 {
     ScreenInfo *screen_info;
+    Decoration *decoration;
     FramePixmap frame_pix;
     xfwmPixmap *my_pixmap;
     gint state, x, button, left, right;
@@ -995,6 +1022,7 @@ frameDrawWin (Client * c)
     frameClearQueueDraw (c);
 
     screen_info = c->screen_info;
+    decoration = getDecorationForColor(screen_info, c->qubes_label_color);
     requires_clearing = FALSE;
     width_changed = FALSE;
     height_changed = FALSE;
@@ -1086,7 +1114,7 @@ frameDrawWin (Client * c)
             }
             else if (button >= 0)
             {
-                if (x + screen_info->buttons[button][state].width + screen_info->params->button_spacing < right)
+                if (x + decoration->buttons[button][state].width + screen_info->params->button_spacing < right)
                 {
                     my_pixmap = clientGetButtonPixmap (c, button, clientGetButtonState (c, button, state));
                     if (!xfwmPixmapNone(my_pixmap))
@@ -1094,11 +1122,11 @@ frameDrawWin (Client * c)
                         xfwmWindowSetBG (&c->buttons[button], my_pixmap);
                     }
                     xfwmWindowShow (&c->buttons[button], x,
-                        (frameTop (c) - screen_info->buttons[button][state].height + 1) / 2,
-                        screen_info->buttons[button][state].width,
-                        screen_info->buttons[button][state].height, TRUE);
+                        (frameTop (c) - decoration->buttons[button][state].height + 1) / 2,
+                        decoration->buttons[button][state].width,
+                        decoration->buttons[button][state].height, TRUE);
                     button_x[button] = x;
-                    x = x + screen_info->buttons[button][state].width +
+                    x = x + decoration->buttons[button][state].width +
                         screen_info->params->button_spacing;
                 }
                 else
@@ -1121,19 +1149,19 @@ frameDrawWin (Client * c)
             }
             else if (button >= 0)
             {
-                if (x - screen_info->buttons[button][state].width - screen_info->params->button_spacing > left)
+                if (x - decoration->buttons[button][state].width - screen_info->params->button_spacing > left)
                 {
                     my_pixmap = clientGetButtonPixmap (c, button, clientGetButtonState (c, button, state));
                     if (!xfwmPixmapNone(my_pixmap))
                     {
                         xfwmWindowSetBG (&c->buttons[button], my_pixmap);
                     }
-                    x = x - screen_info->buttons[button][state].width -
+                    x = x - decoration->buttons[button][state].width -
                         screen_info->params->button_spacing;
                     xfwmWindowShow (&c->buttons[button], x,
-                        (frameTop (c) - screen_info->buttons[button][state].height + 1) / 2,
-                        screen_info->buttons[button][state].width,
-                        screen_info->buttons[button][state].height, TRUE);
+                        (frameTop (c) - decoration->buttons[button][state].height + 1) / 2,
+                        decoration->buttons[button][state].width,
+                        decoration->buttons[button][state].height, TRUE);
                     button_x[button] = x;
                 }
                 else
@@ -1147,12 +1175,12 @@ frameDrawWin (Client * c)
 
         top_width = frameWidth (c) - frameTopLeftWidth (c, state) - frameTopRightWidth (c, state);
         bottom_width = frameWidth (c) -
-            screen_info->corners[CORNER_BOTTOM_LEFT][state].width -
-            screen_info->corners[CORNER_BOTTOM_RIGHT][state].width;
+            decoration->corners[CORNER_BOTTOM_LEFT][state].width -
+            decoration->corners[CORNER_BOTTOM_RIGHT][state].width;
         left_height = frameHeight (c) - frameTop (c) -
-            screen_info->corners[CORNER_BOTTOM_LEFT][state].height;
+            decoration->corners[CORNER_BOTTOM_LEFT][state].height;
         right_height = frameHeight (c) - frameTop (c) -
-            screen_info->corners[CORNER_BOTTOM_RIGHT][state].height;
+            decoration->corners[CORNER_BOTTOM_RIGHT][state].height;
 
         xfwmPixmapInit (screen_info, &frame_pix.pm_title);
         xfwmPixmapInit (screen_info, &frame_pix.pm_sides[SIDE_TOP]);
@@ -1171,13 +1199,13 @@ frameDrawWin (Client * c)
         if (requires_clearing)
         {
             xfwmWindowSetBG (&c->corners[CORNER_TOP_LEFT],
-                &screen_info->corners[CORNER_TOP_LEFT][state]);
+                &decoration->corners[CORNER_TOP_LEFT][state]);
             xfwmWindowSetBG (&c->corners[CORNER_TOP_RIGHT],
-                &screen_info->corners[CORNER_TOP_RIGHT][state]);
+                &decoration->corners[CORNER_TOP_RIGHT][state]);
             xfwmWindowSetBG (&c->corners[CORNER_BOTTOM_LEFT],
-                &screen_info->corners[CORNER_BOTTOM_LEFT][state]);
+                &decoration->corners[CORNER_BOTTOM_LEFT][state]);
             xfwmWindowSetBG (&c->corners[CORNER_BOTTOM_RIGHT],
-                &screen_info->corners[CORNER_BOTTOM_RIGHT][state]);
+                &decoration->corners[CORNER_BOTTOM_RIGHT][state]);
         }
 
         if (FLAG_TEST_ALL (c->flags, CLIENT_FLAG_MAXIMIZED)
@@ -1203,7 +1231,7 @@ frameDrawWin (Client * c)
             {
                 xfwmPixmapCreate (screen_info, &frame_pix.pm_sides[SIDE_LEFT],
                     frameLeft (c), left_height);
-                xfwmPixmapFill (&screen_info->sides[SIDE_LEFT][state],
+                xfwmPixmapFill (&decoration->sides[SIDE_LEFT][state],
                     &frame_pix.pm_sides[SIDE_LEFT],
                     0, 0, frameLeft (c), left_height);
                 xfwmWindowSetBG (&c->sides[SIDE_LEFT],
@@ -1213,7 +1241,7 @@ frameDrawWin (Client * c)
 
                 xfwmPixmapCreate (screen_info, &frame_pix.pm_sides[SIDE_RIGHT],
                     frameRight (c), right_height);
-                xfwmPixmapFill (&screen_info->sides[SIDE_RIGHT][state],
+                xfwmPixmapFill (&decoration->sides[SIDE_RIGHT][state],
                     &frame_pix.pm_sides[SIDE_RIGHT],
                     0, 0, frameRight (c), right_height);
                 xfwmWindowSetBG (&c->sides[SIDE_RIGHT],
@@ -1225,13 +1253,13 @@ frameDrawWin (Client * c)
 
             xfwmPixmapCreate (screen_info, &frame_pix.pm_sides[SIDE_BOTTOM],
                 bottom_width, frameBottom (c));
-            xfwmPixmapFill (&screen_info->sides[SIDE_BOTTOM][state],
+            xfwmPixmapFill (&decoration->sides[SIDE_BOTTOM][state],
                 &frame_pix.pm_sides[SIDE_BOTTOM],
                 0, 0, bottom_width, frameBottom (c));
             xfwmWindowSetBG (&c->sides[SIDE_BOTTOM],
                 &frame_pix.pm_sides[SIDE_BOTTOM]);
             xfwmWindowShow (&c->sides[SIDE_BOTTOM],
-                screen_info->corners[CORNER_BOTTOM_LEFT][state].width,
+                decoration->corners[CORNER_BOTTOM_LEFT][state].width,
                 frameHeight (c) - frameBottom (c), bottom_width, frameBottom (c),
                 (requires_clearing | width_changed));
 
@@ -1239,7 +1267,7 @@ frameDrawWin (Client * c)
             {
                 xfwmWindowSetBG (&c->sides[SIDE_TOP], &frame_pix.pm_sides[SIDE_TOP]);
                 xfwmWindowShow (&c->sides[SIDE_TOP],
-                    screen_info->corners[CORNER_TOP_LEFT][state].width,
+                    decoration->corners[CORNER_TOP_LEFT][state].width,
                     0, top_width, frame_pix.pm_sides[SIDE_TOP].height,
                     (requires_clearing | width_changed));
             }
@@ -1250,29 +1278,29 @@ frameDrawWin (Client * c)
 
             xfwmWindowShow (&c->corners[CORNER_TOP_LEFT], 0, 0,
                 frameTopLeftWidth (c, state),
-                screen_info->corners[CORNER_TOP_LEFT][state].height,
+                decoration->corners[CORNER_TOP_LEFT][state].height,
                 requires_clearing);
 
             xfwmWindowShow (&c->corners[CORNER_TOP_RIGHT],
                 frameWidth (c) - frameTopRightWidth (c, state),
                 0, frameTopRightWidth (c, state),
-                screen_info->corners[CORNER_TOP_RIGHT][state].height,
+                decoration->corners[CORNER_TOP_RIGHT][state].height,
                 requires_clearing);
 
             xfwmWindowShow (&c->corners[CORNER_BOTTOM_LEFT], 0,
                 frameHeight (c) -
-                screen_info->corners[CORNER_BOTTOM_LEFT][state].height,
-                screen_info->corners[CORNER_BOTTOM_LEFT][state].width,
-                screen_info->corners[CORNER_BOTTOM_LEFT][state].height,
+                decoration->corners[CORNER_BOTTOM_LEFT][state].height,
+                decoration->corners[CORNER_BOTTOM_LEFT][state].width,
+                decoration->corners[CORNER_BOTTOM_LEFT][state].height,
                 requires_clearing);
 
             xfwmWindowShow (&c->corners[CORNER_BOTTOM_RIGHT],
                 frameWidth (c) -
-                screen_info->corners[CORNER_BOTTOM_RIGHT][state].width,
+                decoration->corners[CORNER_BOTTOM_RIGHT][state].width,
                 frameHeight (c) -
-                screen_info->corners[CORNER_BOTTOM_RIGHT][state].height,
-                screen_info->corners[CORNER_BOTTOM_RIGHT][state].width,
-                screen_info->corners[CORNER_BOTTOM_RIGHT][state].height,
+                decoration->corners[CORNER_BOTTOM_RIGHT][state].height,
+                decoration->corners[CORNER_BOTTOM_RIGHT][state].width,
+                decoration->corners[CORNER_BOTTOM_RIGHT][state].height,
                 requires_clearing);
         }
         frameSetShape (c, state, &frame_pix, button_x);
Index: xfwm4-4.12.3/src/mypixmap.c
===================================================================
--- xfwm4-4.12.3.orig/src/mypixmap.c
+++ xfwm4-4.12.3/src/mypixmap.c
@@ -43,6 +43,7 @@
 #include <gdk/gdk.h>
 #include <gdk/gdkx.h>
 #include <libxfce4util/libxfce4util.h>
+#include <gtk/gtk.h>
 #include <stdlib.h>
 #include <stdio.h>
 
@@ -513,7 +514,7 @@ file_buffer (enum buf_op op, gpointer ha
 
 /* This function does all the work. */
 static GdkPixbuf *
-pixbuf_create_from_xpm (gpointer handle, xfwmColorSymbol *color_sym)
+pixbuf_create_from_xpm (gpointer handle, xfwmColorSymbol *color_sym, gboolean override, gdouble override_h, gdouble override_s, gdouble override_v)
 {
     gchar pixel_str[32];
     const gchar *buffer;
@@ -603,6 +604,18 @@ pixbuf_create_from_xpm (gpointer handle,
             color->red = 0;
             color->green = 0;
             color->blue = 0;
+        } else if (override) {
+            gdouble h, s, v, new_r, new_g, new_b;
+            /* override color - for Qubes labels */
+            gtk_rgb_to_hsv(
+                    1.0*color->red/0xFFFF,
+                    1.0*color->green/0xFFFF,
+                    1.0*color->blue/0xFFFF,
+                    &h, &s, &v);
+            gtk_hsv_to_rgb(override_h, override_s, v, &new_r, &new_g, &new_b);
+            color->red = new_r*0xFFFF;
+            color->green = new_g*0xFFFF;
+            color->blue = new_b*0xFFFF;
         }
 
         g_free (color_name);
@@ -674,7 +687,8 @@ pixbuf_create_from_xpm (gpointer handle,
 
 
 static GdkPixbuf *
-xpm_image_load (const char *filename, xfwmColorSymbol *color_sym)
+xpm_image_load (const char *filename, xfwmColorSymbol *color_sym,
+        gboolean override, gdouble override_h, gdouble override_s, gdouble override_v)
 {
     guchar buffer[1024];
     GdkPixbuf *pixbuf;
@@ -698,7 +712,8 @@ xpm_image_load (const char *filename, xf
     fseek (f, 0, SEEK_SET);
     memset (&h, 0, sizeof (h));
     h.infile = f;
-    pixbuf = pixbuf_create_from_xpm (&h, color_sym);
+    pixbuf = pixbuf_create_from_xpm (&h, color_sym, override,
+            override_h, override_s, override_v);
     g_free (h.buffer);
     fclose (f);
 
@@ -933,7 +948,7 @@ xfwmPixmapRenderGdkPixbuf (xfwmPixmap *
 }
 
 gboolean
-xfwmPixmapLoad (ScreenInfo * screen_info, xfwmPixmap * pm, const gchar * dir, const gchar * file, xfwmColorSymbol * cs)
+xfwmPixmapLoad (ScreenInfo * screen_info, xfwmPixmap * pm, const gchar * dir, const gchar * file, xfwmColorSymbol * cs, guint label_color)
 {
     gchar *filename;
     gchar *filexpm;
@@ -954,7 +969,17 @@ xfwmPixmapLoad (ScreenInfo * screen_info
     filexpm = g_strdup_printf ("%s.%s", file, "xpm");
     filename = g_build_filename (dir, filexpm, NULL);
     g_free (filexpm);
-    pixbuf = xpm_image_load (filename, cs);
+    if (label_color != 0xFFFFFFFF) {
+        gdouble h, s, v;
+        gtk_rgb_to_hsv(
+                1.0*((label_color & 0xFF0000) >> 16)/0xFF,
+                1.0*((label_color & 0x00FF00) >>  8)/0xFF,
+                1.0*((label_color & 0x0000FF) >>  0)/0xFF,
+                &h, &s, &v);
+        pixbuf = xpm_image_load (filename, cs, TRUE, h, s, v);
+    } else {
+        pixbuf = xpm_image_load (filename, cs, FALSE, 0, 0, 0);
+    }
     g_free (filename);
 
     /* Compose with other image formats, if any available. */
Index: xfwm4-4.12.3/src/mypixmap.h
===================================================================
--- xfwm4-4.12.3.orig/src/mypixmap.h
+++ xfwm4-4.12.3/src/mypixmap.h
@@ -61,7 +61,8 @@ gboolean                 xfwmPixmapLoad
                                                                  xfwmPixmap *,
                                                                  const gchar *,
                                                                  const gchar *,
-                                                                 xfwmColorSymbol *);
+                                                                 xfwmColorSymbol *,
+                                                                 guint label_color);
 void                     xfwmPixmapCreate                       (ScreenInfo *,
                                                                  xfwmPixmap *,
                                                                  gint,
Index: xfwm4-4.12.3/src/screen.c
===================================================================
--- xfwm4-4.12.3.orig/src/screen.c
+++ xfwm4-4.12.3/src/screen.c
@@ -166,7 +166,7 @@ myScreenInit (DisplayInfo *display_info,
     GdkWindow *event_win;
     PangoLayout *layout;
     long desktop_visible;
-    int i, j;
+    int i, j, k;
 
     g_return_val_if_fail (display_info, NULL);
     g_return_val_if_fail (GDK_IS_SCREEN (gscr), NULL);
@@ -313,30 +313,8 @@ myScreenInit (DisplayInfo *display_info,
     screen_info->title_shadow_colors[INACTIVE].gc = NULL;
     screen_info->title_shadow_colors[INACTIVE].allocated = FALSE;
 
-    for (i = 0; i < SIDE_COUNT; i++)
-    {
-        xfwmPixmapInit (screen_info, &screen_info->sides[i][ACTIVE]);
-        xfwmPixmapInit (screen_info, &screen_info->sides[i][INACTIVE]);
-    }
-    for (i = 0; i < CORNER_COUNT; i++)
-    {
-        xfwmPixmapInit (screen_info, &screen_info->corners[i][ACTIVE]);
-        xfwmPixmapInit (screen_info, &screen_info->corners[i][INACTIVE]);
-    }
-    for (i = 0; i < BUTTON_COUNT; i++)
-    {
-        for (j = 0; j < STATE_COUNT; j++)
-        {
-            xfwmPixmapInit (screen_info, &screen_info->buttons[i][j]);
-        }
-    }
-    for (i = 0; i < TITLE_COUNT; i++)
-    {
-        xfwmPixmapInit (screen_info, &screen_info->title[i][ACTIVE]);
-        xfwmPixmapInit (screen_info, &screen_info->title[i][INACTIVE]);
-        xfwmPixmapInit (screen_info, &screen_info->top[i][ACTIVE]);
-        xfwmPixmapInit (screen_info, &screen_info->top[i][INACTIVE]);
-    }
+    screen_info->decoration = g_hash_table_new_full(NULL, NULL,
+            NULL, (GDestroyNotify)unloadSingleDecoration);
 
     screen_info->monitors_index = NULL;
     myScreenInvalidateMonitorCache (screen_info);
Index: xfwm4-4.12.3/src/screen.h
===================================================================
--- xfwm4-4.12.3.orig/src/screen.h
+++ xfwm4-4.12.3/src/screen.h
@@ -55,6 +55,8 @@
                                  SuperMask | \
                                  HyperMask)
 
+#define XPM_COLOR_SYMBOL_SIZE   24
+
 #ifdef HAVE_COMPOSITOR
 struct _gaussian_conv {
     int     size;
@@ -63,6 +65,15 @@ struct _gaussian_conv {
 typedef struct _gaussian_conv gaussian_conv;
 #endif /* HAVE_COMPOSITOR */
 
+struct _Decoration
+{
+    xfwmPixmap buttons[BUTTON_COUNT][STATE_COUNT];
+    xfwmPixmap corners[CORNER_COUNT][2];
+    xfwmPixmap sides[SIDE_COUNT][2];
+    xfwmPixmap title[TITLE_COUNT][2];
+    xfwmPixmap top[TITLE_COUNT][2];
+};
+
 struct _ScreenInfo
 {
     /* The display this screen belongs to */
@@ -81,11 +92,10 @@ struct _ScreenInfo
     /* Theme pixmaps and other params, per screen */
     XfwmColor title_colors[2];
     XfwmColor title_shadow_colors[2];
-    xfwmPixmap buttons[BUTTON_COUNT][STATE_COUNT];
-    xfwmPixmap corners[CORNER_COUNT][2];
-    xfwmPixmap sides[SIDE_COUNT][2];
-    xfwmPixmap title[TITLE_COUNT][2];
-    xfwmPixmap top[TITLE_COUNT][2];
+    XfwmColor qubes_label_colors[MAX_QUBES_LABELS];
+    xfwmColorSymbol colsym[ XPM_COLOR_SYMBOL_SIZE + 1 ];
+    /* hash table label_color->Decoration* */
+    GHashTable *decoration;
 
     /* Per screen graphic contexts */
     GC box_gc;
Index: xfwm4-4.12.3/src/settings.c
===================================================================
--- xfwm4-4.12.3.orig/src/settings.c
+++ xfwm4-4.12.3/src/settings.c
@@ -46,7 +46,6 @@
 
 #define CHANNEL_XFWM            "xfwm4"
 #define THEMERC                 "themerc"
-#define XPM_COLOR_SYMBOL_SIZE   24
 
 #define KEYMAP_UPDATE_TIMEOUT   250 /* ms */
 static guint keymap_timeout   = 0;
@@ -305,10 +304,8 @@ getTitleShadow (Settings *rc, const gcha
     return TITLE_SHADOW_NONE;
 }
 
-static void
-loadTheme (ScreenInfo *screen_info, Settings *rc)
+Decoration *getDecorationForColor(ScreenInfo *screen_info, guint32 color)
 {
-
     static const char *side_names[] = {
         "left",
         "right",
@@ -342,6 +339,92 @@ loadTheme (ScreenInfo *screen_info, Sett
         "toggled-prelight",
         "toggled-pressed"
     };
+    Decoration *decoration;
+    gchar imagename[30];
+    gchar *theme;
+    guint i, j;
+
+    decoration = g_hash_table_lookup(screen_info->decoration, GINT_TO_POINTER(color));
+    if (decoration)
+        return decoration;
+
+    decoration = g_new(Decoration, 1);
+    theme = screen_info->params->theme;
+
+    for (i = 0; i < SIDE_COUNT; i++)
+    {
+        xfwmPixmapInit (screen_info, &decoration->sides[i][ACTIVE]);
+        xfwmPixmapInit (screen_info, &decoration->sides[i][INACTIVE]);
+    }
+    for (i = 0; i < CORNER_COUNT; i++)
+    {
+        xfwmPixmapInit (screen_info, &decoration->corners[i][ACTIVE]);
+        xfwmPixmapInit (screen_info, &decoration->corners[i][INACTIVE]);
+    }
+    for (i = 0; i < BUTTON_COUNT; i++)
+    {
+        for (j = 0; j < STATE_COUNT; j++)
+        {
+            xfwmPixmapInit (screen_info, &decoration->buttons[i][j]);
+        }
+    }
+    for (i = 0; i < TITLE_COUNT; i++)
+    {
+        xfwmPixmapInit (screen_info, &decoration->title[i][ACTIVE]);
+        xfwmPixmapInit (screen_info, &decoration->title[i][INACTIVE]);
+        xfwmPixmapInit (screen_info, &decoration->top[i][ACTIVE]);
+        xfwmPixmapInit (screen_info, &decoration->top[i][INACTIVE]);
+    }
+
+    for (i = 0; i < SIDE_COUNT; i++)
+    {
+        if (i == SIDE_TOP)
+            continue;  /* There is no top decoration per se. */
+
+        g_snprintf(imagename, sizeof (imagename), "%s-active", side_names[i]);
+        xfwmPixmapLoad (screen_info, &decoration->sides[i][ACTIVE], theme, imagename, screen_info->colsym, color);
+
+        g_snprintf(imagename, sizeof (imagename), "%s-inactive", side_names[i]);
+        xfwmPixmapLoad (screen_info, &decoration->sides[i][INACTIVE], theme, imagename, screen_info->colsym, color);
+    }
+    for (i = 0; i < CORNER_COUNT; i++)
+    {
+        g_snprintf(imagename, sizeof (imagename), "%s-active", corner_names[i]);
+        xfwmPixmapLoad (screen_info, &decoration->corners[i][ACTIVE], theme, imagename, screen_info->colsym, color);
+
+        g_snprintf(imagename, sizeof (imagename), "%s-inactive", corner_names[i]);
+        xfwmPixmapLoad (screen_info, &decoration->corners[i][INACTIVE], theme, imagename, screen_info->colsym, color);
+    }
+    for (i = 0; i < BUTTON_COUNT; i++)
+    {
+        for (j = 0; j < STATE_COUNT; j++)
+        {
+            g_snprintf(imagename, sizeof (imagename), "%s-%s", button_names[i], button_state_names[j]);
+            xfwmPixmapLoad (screen_info, &decoration->buttons[i][j], theme, imagename, screen_info->colsym, color);
+        }
+    }
+    for (i = 0; i < TITLE_COUNT; i++)
+    {
+        g_snprintf(imagename, sizeof (imagename), "title-%d-active", i + 1);
+        xfwmPixmapLoad (screen_info, &decoration->title[i][ACTIVE], theme, imagename, screen_info->colsym, color);
+
+        g_snprintf(imagename, sizeof (imagename), "title-%d-inactive", i + 1);
+        xfwmPixmapLoad (screen_info, &decoration->title[i][INACTIVE], theme, imagename, screen_info->colsym, color);
+
+        g_snprintf(imagename, sizeof (imagename), "top-%d-active", i + 1);
+        xfwmPixmapLoad (screen_info, &decoration->top[i][ACTIVE], theme, imagename, screen_info->colsym, color);
+
+        g_snprintf(imagename, sizeof (imagename), "top-%d-inactive", i + 1);
+        xfwmPixmapLoad (screen_info, &decoration->top[i][INACTIVE], theme, imagename, screen_info->colsym, color);
+    }
+
+    g_hash_table_insert(screen_info->decoration, GINT_TO_POINTER(color), decoration);
+    return decoration;
+}
+
+static void
+loadTheme (ScreenInfo *screen_info, Settings *rc)
+{
 
     static const char *ui_part[] = {
         "fg",
@@ -399,11 +482,9 @@ loadTheme (ScreenInfo *screen_info, Sett
         NULL
     };
 
-    gchar imagename[30];
     GValue tmp_val = { 0, };
     GValue tmp_val2 = { 0, };
     DisplayInfo *display_info;
-    xfwmColorSymbol colsym[ XPM_COLOR_SYMBOL_SIZE + 1 ];
     GtkWidget *widget;
     gchar *theme;
     const gchar *font;
@@ -463,11 +544,13 @@ loadTheme (ScreenInfo *screen_info, Sett
 
     for (i = 0; i < XPM_COLOR_SYMBOL_SIZE; i++)
     {
-        colsym[i].name = rc[i].option;
-        colsym[i].value = g_value_get_string(rc[i].value);
+        g_free(screen_info->colsym[i].name);
+        g_free(screen_info->colsym[i].value);
+        screen_info->colsym[i].name = g_strdup(rc[i].option);
+        screen_info->colsym[i].value = g_strdup(g_value_get_string(rc[i].value));
     }
-    colsym[XPM_COLOR_SYMBOL_SIZE].name = NULL;
-    colsym[XPM_COLOR_SYMBOL_SIZE].value = NULL;
+    screen_info->colsym[XPM_COLOR_SYMBOL_SIZE].name = NULL;
+    screen_info->colsym[XPM_COLOR_SYMBOL_SIZE].value = NULL;
 
     /* Standard double click time ... */
     display_info->double_click_time = abs (getIntValue ("double_click_time", rc));
@@ -519,48 +602,6 @@ loadTheme (ScreenInfo *screen_info, Sett
     screen_info->white_gc = widget->style->white_gc;
     g_object_ref (G_OBJECT (widget->style->white_gc));
 
-    for (i = 0; i < SIDE_COUNT; i++)
-    {
-        if (i == SIDE_TOP)
-            continue;  /* There is no top decoration per se. */
-
-        g_snprintf(imagename, sizeof (imagename), "%s-active", side_names[i]);
-        xfwmPixmapLoad (screen_info, &screen_info->sides[i][ACTIVE], theme, imagename, colsym);
-
-        g_snprintf(imagename, sizeof (imagename), "%s-inactive", side_names[i]);
-        xfwmPixmapLoad (screen_info, &screen_info->sides[i][INACTIVE], theme, imagename, colsym);
-    }
-    for (i = 0; i < CORNER_COUNT; i++)
-    {
-        g_snprintf(imagename, sizeof (imagename), "%s-active", corner_names[i]);
-        xfwmPixmapLoad (screen_info, &screen_info->corners[i][ACTIVE], theme, imagename, colsym);
-
-        g_snprintf(imagename, sizeof (imagename), "%s-inactive", corner_names[i]);
-        xfwmPixmapLoad (screen_info, &screen_info->corners[i][INACTIVE], theme, imagename, colsym);
-    }
-    for (i = 0; i < BUTTON_COUNT; i++)
-    {
-        for (j = 0; j < STATE_COUNT; j++)
-        {
-            g_snprintf(imagename, sizeof (imagename), "%s-%s", button_names[i], button_state_names[j]);
-            xfwmPixmapLoad (screen_info, &screen_info->buttons[i][j], theme, imagename, colsym);
-        }
-    }
-    for (i = 0; i < TITLE_COUNT; i++)
-    {
-        g_snprintf(imagename, sizeof (imagename), "title-%d-active", i + 1);
-        xfwmPixmapLoad (screen_info, &screen_info->title[i][ACTIVE], theme, imagename, colsym);
-
-        g_snprintf(imagename, sizeof (imagename), "title-%d-inactive", i + 1);
-        xfwmPixmapLoad (screen_info, &screen_info->title[i][INACTIVE], theme, imagename, colsym);
-
-        g_snprintf(imagename, sizeof (imagename), "top-%d-active", i + 1);
-        xfwmPixmapLoad (screen_info, &screen_info->top[i][ACTIVE], theme, imagename, colsym);
-
-        g_snprintf(imagename, sizeof (imagename), "top-%d-inactive", i + 1);
-        xfwmPixmapLoad (screen_info, &screen_info->top[i][INACTIVE], theme, imagename, colsym);
-    }
-
     screen_info->box_gc = createGC (screen_info, "#FFFFFF", GXxor, NULL, 2, TRUE);
 
     if (!g_ascii_strcasecmp ("left", getStringValue ("title_alignment", rc)))
@@ -592,7 +633,9 @@ loadTheme (ScreenInfo *screen_info, Sett
     screen_info->params->title_horizontal_offset =
         getIntValue ("title_horizontal_offset", rc);
 
-    g_free (theme);
+    if (screen_info->params->theme)
+        g_free (screen_info->params->theme);
+    screen_info->params->theme = theme;
 }
 
 static void
@@ -944,37 +987,47 @@ loadSettings (ScreenInfo *screen_info)
     return TRUE;
 }
 
-static void
-unloadTheme (ScreenInfo *screen_info)
+void
+unloadSingleDecoration (Decoration *decoration)
 {
     int i, j;
 
-    TRACE ("entering unloadTheme");
-
     for (i = 0; i < SIDE_COUNT; i++)
     {
-        xfwmPixmapFree (&screen_info->sides[i][ACTIVE]);
-        xfwmPixmapFree (&screen_info->sides[i][INACTIVE]);
+        xfwmPixmapFree (&decoration->sides[i][ACTIVE]);
+        xfwmPixmapFree (&decoration->sides[i][INACTIVE]);
     }
     for (i = 0; i < CORNER_COUNT; i++)
     {
-        xfwmPixmapFree (&screen_info->corners[i][ACTIVE]);
-        xfwmPixmapFree (&screen_info->corners[i][INACTIVE]);
+        xfwmPixmapFree (&decoration->corners[i][ACTIVE]);
+        xfwmPixmapFree (&decoration->corners[i][INACTIVE]);
     }
     for (i = 0; i < BUTTON_COUNT; i++)
     {
         for (j = 0; j < STATE_COUNT; j++)
         {
-            xfwmPixmapFree (&screen_info->buttons[i][j]);
+            xfwmPixmapFree (&decoration->buttons[i][j]);
         }
     }
     for (i = 0; i < TITLE_COUNT; i++)
     {
-        xfwmPixmapFree (&screen_info->title[i][ACTIVE]);
-        xfwmPixmapFree (&screen_info->title[i][INACTIVE]);
-        xfwmPixmapFree (&screen_info->top[i][ACTIVE]);
-        xfwmPixmapFree (&screen_info->top[i][INACTIVE]);
+        xfwmPixmapFree (&decoration->title[i][ACTIVE]);
+        xfwmPixmapFree (&decoration->title[i][INACTIVE]);
+        xfwmPixmapFree (&decoration->top[i][ACTIVE]);
+        xfwmPixmapFree (&decoration->top[i][INACTIVE]);
     }
+}
+
+static void
+unloadTheme (ScreenInfo *screen_info)
+{
+    TRACE ("entering unloadTheme");
+
+    g_hash_table_remove_all(screen_info->decoration);
+
+    g_free(screen_info->params->theme);
+    screen_info->params->theme = NULL;
+
     if (screen_info->box_gc != None)
     {
         XFreeGC (myScreenGetXDisplay (screen_info), screen_info->box_gc);
Index: xfwm4-4.12.3/src/settings.h
===================================================================
--- xfwm4-4.12.3.orig/src/settings.h
+++ xfwm4-4.12.3/src/settings.h
@@ -155,6 +155,33 @@ enum
     PLACE_CENTER
 };
 
+enum
+{
+    QUBES_LABEL_DOM0 = 0,
+    QUBES_LABEL_RED = 1,
+    QUBES_LABEL_ORANGE = 2,
+    QUBES_LABEL_YELLOW = 3,
+    QUBES_LABEL_GREEN = 4,
+    QUBES_LABEL_GRAY = 5,
+    QUBES_LABEL_BLUE = 6,
+    QUBES_LABEL_PURPLE = 7,
+    QUBES_LABEL_BLACK = 8,
+    MAX_QUBES_LABELS = 9
+};
+
+/* RGB values */
+static const guint qubes_label_colors[] = {
+    0xFFFFFFFF, /* QUBES_LABEL_DOM0 */
+    0xcc0000,   /* QUBES_LABEL_RED */
+    0xf57900,   /* QUBES_LABEL_ORANGE */
+    0xedd400,   /* QUBES_LABEL_YELLOW */
+    0x73d216,   /* QUBES_LABEL_GREEN */
+    0x555753,   /* QUBES_LABEL_GRAY */
+    0x3465a4,   /* QUBES_LABEL_BLUE */
+    0x75507b,   /* QUBES_LABEL_PURPLE */
+    0x000000,   /* QUBES_LABEL_BLACK */
+};
+
 struct _XfwmColor
 {
     GdkColor col;
@@ -197,6 +224,7 @@ struct _XfwmParams
     int shadow_delta_y;
     int shadow_opacity;
     int snap_width;
+    gchar *theme;
     int title_alignment;
     int title_horizontal_offset;
     int title_shadow[2];
@@ -250,5 +278,9 @@ gboolean                 reloadSettings
                                                                  int);
 gboolean                 initSettings                           (ScreenInfo *);
 void                     closeSettings                          (ScreenInfo *);
+void                     unloadSingleDecoration                 (Decoration *decoration);
+Decoration *getDecorationForColor(ScreenInfo *screen_info, guint32 color);
+
+#define QUBES_LABEL_DOM0 0xFFFFFFFF
 
 #endif /* INC_SETTINGS_H */
Index: xfwm4-4.12.3/src/display.h
===================================================================
--- xfwm4-4.12.3.orig/src/display.h
+++ xfwm4-4.12.3/src/display.h
@@ -277,6 +277,7 @@ typedef struct _DisplayInfo       Displa
 typedef struct _XfwmColor         XfwmColor;
 typedef struct _xfwmPixmap        xfwmPixmap;
 typedef struct _XfwmParams        XfwmParams;
+typedef struct _Decoration        Decoration;
 typedef struct _ScreenInfo        ScreenInfo;
 typedef struct _Settings          Settings;
 
